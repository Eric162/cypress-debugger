import {
  createContext,
  PropsWithChildren,
  useCallback,
  useContext,
  useEffect,
  useState,
} from "react";
import rrwebPlayer, { RRwebPlayerOptions } from "rrweb-player";
import { useReplayerData } from "../hooks/useReplayerData";
import { CypressStep, ReplayerStepData } from "../types";
import { useCypressStepsContext } from "./cypressSteps";

export type ReplayerContextType = {
  init: (ref: HTMLElement) => void;
  setReplayerData: (data: ReplayerStepData[]) => void;
  jumpToTimestamp(ts: number): void;
  onBefore(i: number): void;
  onAfter(i: any): void;
};

const ReplayerContext = createContext<ReplayerContextType>({
  init: () => {},
  setReplayerData: () => {},
  jumpToTimestamp: () => {},
  onBefore: () => {},
  onAfter: () => {},
});

export const useReplayerContext = () => useContext(ReplayerContext);

export default function ReplayerContextProvider({
  children,
}: PropsWithChildren<unknown>) {
  const [replayer, setReplayer] = useState<rrwebPlayer | null>(null);
  const { replayerData, setReplayerData } = useReplayerData();
  const { activeStepObj } = useCypressStepsContext();
  const [beforeAfter, setBeforeAfter] = useState<"before" | "after">("before");

  const init = useCallback(
    (replayerTarget: HTMLElement, replayerOptions?: RRwebPlayerOptions) => {
      if (replayerData.length < 2 || !replayerTarget) return;

      // remove all dom elements generated by replayer
      while (replayerTarget.firstChild) {
        replayerTarget.removeChild(replayerTarget.firstChild);
      }

      const _replayer = new rrwebPlayer({
        target: replayerTarget,
        props: {
          width: 800,
          height: 600,
          autoPlay: false,
          ...replayerOptions,
          events: replayerData.map((e) => e.payload),
        },
      });

      _replayer.addEventListener("event-cast", (e) => {
        console.log(e);
      });

      setReplayer(_replayer);
    },
    [replayerData]
  );

  const jumpToTimestamp = useCallback(
    (ts: number) => {
      if (!replayer) return;

      console.log({
        first: new Date(replayerData[0].timestamp).toISOString(),
        current: new Date(ts).toISOString(),
      });
      replayer.goto(Math.abs(ts - replayerData[0].timestamp));
      replayer.pause();
    },
    [replayer, replayerData]
  );

  const updatePlayer = useCallback(
    (step: CypressStep) => {
      const replayerEntry =
        replayerData.find(
          (entry) =>
            step.payload.__currents_extra &&
            entry.id === step.payload.__currents_extra[beforeAfter]?.rrEventId
        ) ?? null;

      if (replayerEntry) {
        jumpToTimestamp(replayerEntry.timestamp);
        return;
      }
      jumpToTimestamp(step.timestamp);
    },
    [replayerData, jumpToTimestamp, beforeAfter]
  );

  useEffect(() => {
    if (!activeStepObj) {
      return;
    }

    updatePlayer(activeStepObj);
  }, [activeStepObj, updatePlayer]);

  function onBefore(e: any) {
    e.stopPropagation();
    setBeforeAfter("before");
  }

  function onAfter(e: any) {
    e.stopPropagation();
    setBeforeAfter("after");
  }

  return (
    <ReplayerContext.Provider
      value={{ init, jumpToTimestamp, onBefore, onAfter, setReplayerData }}
    >
      {children}
    </ReplayerContext.Provider>
  );
}
